- id: hamotocounter
  alias: 'system: счетчик работы HA'
  description: автоматизация счетчиков моточасов HA и uptime
  trigger:
  - platform: time_pattern
    minutes: /1
    id: motocounter
  action:
  - service: counter.increment
    target:
      entity_id:
      - counter.ha_counter
      - counter.ha_uptime
- id: errorcounterautomation
  alias: 'system: Error Counting Automation'
  description: Подсчет ошибок в логе HA
  trigger:
  - platform: event
    event_type: system_log_event
    event_data:
      level: ERROR
  action:
  - service: counter.increment
    target:
      entity_id: counter.error_counter
- id: '1610048006861'
  alias: 'WLED: light_on_sunset'
  description: Включение иллюминации после заката
  trigger:
  - platform: sun
    event: sunset
    offset: 00:40:00
  condition:
  - condition: device
    type: is_off
    device_id: cb0de61ccfccc8fbf89ee88725c933a1
    entity_id: light.wled
    domain: light
  - condition: state
    entity_id: group.family
    state: home
  action:
  - type: turn_on
    device_id: cb0de61ccfccc8fbf89ee88725c933a1
    entity_id: light.wled
    domain: light
    brightness_pct: 80
  - device_id: cb0de61ccfccc8fbf89ee88725c933a1
    domain: select
    entity_id: select.wled_color_palette
    type: select_option
    option: '* Color 1'
  mode: single
- id: '1614532790834'
  alias: 'system: Автоматическая перезагрузка HA'
  description: Перезагружает HA по расписанию
  trigger:
  - platform: time
    at: 02:07
  condition: []
  action:
  - service: notify.telegram
    data:
      message: Home assistant перезапускается.
      title: Сообщение от HA
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: homeassistant.restart
  mode: single
- id: '1616609450692'
  alias: 'TV: Включить ТВ утром'
  description: ''
  trigger:
  - platform: time
    at: 06:40
  condition:
  - condition: state
    entity_id: media_player.mi_tv_kitchen
    state: unavailable
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  action:
  - service: switch.turn_on
    target:
      entity_id: switch.mi_tv_kitchen_switch
  - wait_for_trigger:
    - platform: state
      entity_id: media_player.mi_tv_kitchen
      from: unavailable
    timeout: '10'
    continue_on_timeout: false
  - wait_for_trigger:
    - platform: state
      entity_id: binary_sensor.0x158d0003cf7b9a_motion
      to: 'on'
    continue_on_timeout: false
  - service: script.mitv_volume_off
  mode: single
- id: '1624545549299'
  alias: 'TV: Управление выключателем kitchen_tv'
  description: выключает переключатель при обнаружении выключения тв (для управления
    Алисой)
  trigger:
  - platform: state
    entity_id: media_player.mi_tv_kitchen
    to: unavailable
  condition: []
  action:
  - service: switch.turn_off
    target:
      entity_id: switch.mi_tv_kitchen_switch
  mode: single
- id: '1629402257049'
  alias: 'climate: поддержание влажности в гостиной'
  description: Включает кондиционер при достижении уровня влажности > заданного и
    выключает если меньше
  trigger:
  - platform: state
    entity_id: sensor.a4c138a22b37_humidity
    id: humidity_gostinaya_changed
  condition:
  - condition: state
    entity_id: input_boolean.auto_humidity_gostinaya
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: and
        conditions:
        - condition: state
          entity_id: climate.konditsioner
          state: 'off'
        - condition: numeric_state
          entity_id: sensor.a4c138a22b37_humidity
          above: '75'
      sequence:
      - service: climate.turn_on
        target:
          entity_id: climate.konditsioner
    - conditions:
      - condition: and
        conditions:
        - condition: state
          entity_id: climate.konditsioner
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.a4c138a22b37_humidity
          below: '65'
      sequence:
      - service: climate.turn_off
        target:
          entity_id: climate.konditsioner
    default: []
  mode: single
- id: '1629631003968'
  alias: 'telegram: На улице стемнело'
  description: тестовое сообщение
  trigger:
  - platform: state
    to: 'on'
    entity_id: binary_sensor.dark_outside
    from: 'off'
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      message: Стемнело в {{ states ('sensor.time') }}
      disable_notification: true
      message_tag: is_got_dark_message
  mode: single
- id: '1629890943310'
  alias: 'WLED: яркость по длинному нажатию кнопки'
  description: Яркость по длинному нажатию кнопки
  trigger:
  - platform: state
    entity_id: sensor.mi_button_action
    to: hold
    id: mi_button_hold
  - platform: state
    entity_id: sensor.mi_button_action
    to: release
    id: mi_button_release
  condition: []
  action:
  - repeat:
      while:
      - condition: not
        conditions:
        - condition: trigger
          id: mi_button_release
        - condition: or
          conditions:
          - condition: template
            value_template: '{{ state_attr (''light.wled'', ''brightness'') | int
              > 254 }}

              '
      sequence:
      - service: light.turn_on
        data:
          entity_id: light.wled
          brightness: "{% set brg = state_attr( 'light.wled', 'brightness') | int\
            \ + 10 %} {% if (brg) > 255 %}\n  0\n{% else %}\n  {{ brg }}\n{% endif\
            \ %}\n"
          transition: 0.5
      - service: counter.configure
        data:
          value: '{{ state_attr (''light.wled'', ''brightness'') | int}}

            '
        target:
          entity_id: counter.testovyi_schetchik
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 500
  mode: restart
  max: 10
- id: '1629894827095'
  alias: 'WLED: Случайные эффекты'
  description: ''
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: light.wled
    state: 'on'
  action:
  - service: script.wled_random_effect
  mode: single
- id: '1633689326468'
  alias: 'telegram: Сообщение о приходе Даши домой'
  description: ''
  trigger:
  - platform: state
    entity_id: input_datetime.last_opendoor_time
  condition:
  - condition: state
    entity_id: person.dasha
    state: not_home
  action:
  - wait_for_trigger:
    - platform: state
      entity_id: person.dasha
      to: home
    timeout: 00:05:00
    continue_on_timeout: false
  - service: notify.telegram
    data:
      message: Даша пришла домой в {{ states ('input_datetime.last_opendoor_time')
        }}
  mode: single
- id: '1634396567957'
  alias: 'WLED: Алиса: Включение случайной иллюминации голосом'
  description: ''
  trigger:
  - platform: event
    event_type: yandex_speaker
    event_data:
      value: Сделай громче на 0!
  condition: []
  action:
  - type: turn_on
    device_id: cb0de61ccfccc8fbf89ee88725c933a1
    entity_id: light.wled
    domain: light
    brightness_pct: 100
  - service: script.wled_random_effect
  - service: automation.turn_on
    target:
      entity_id: automation.sluchainye_effekty_wled
  mode: single
- id: '1634403473935'
  alias: 'WLED: Алиса: Включение дневной свет голосом'
  description: ''
  trigger:
  - platform: event
    event_type: yandex_speaker
    event_data:
      value: Сделай громче на 0!!
  condition: []
  action:
  - type: turn_on
    device_id: cb0de61ccfccc8fbf89ee88725c933a1
    entity_id: light.wled
    domain: light
    brightness_pct: 100
  - service: script.wled_warm_light
  - service: automation.turn_off
    target:
      entity_id: automation.sluchainye_effekty_wled
  mode: single
- id: '1636898296250'
  alias: 'telegram: сообщение о сработке датчика движения на кухне'
  description: сработка датчика движения на кухне, если дома никого нет
  trigger:
  - platform: state
    entity_id: input_datetime.last_motion_time_kitchen
    attribute: timestamp
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: group.family
      state: home
  action:
  - service: notify.telegram
    data:
      message: Обнаружено движение на кухне!
      title: Внимание!
  mode: restart
- id: '1619777305897'
  alias: 'telegram: Сообщение в телеграмм о перегреве сервера'
  description: Сообщение в телеграмм о перегреве сервера
  trigger:
  - platform: numeric_state
    entity_id: sensor.processor_temperature
    above: '80'
    id: processor_temperature_alert
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      message: 'Температура процессора {{states(''sensor.processor_temperature'')}}°C
        при     загрузке {{states(''sensor.processor_use_percent'')}}% '
      message_tag: processor_temperature_alert
      title: Перегрев процессора!!!!
  mode: single
- id: '1621940661769'
  alias: 'telegram: меню статус'
  description: отправляет данные датчиков по команде /state
  trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: /state
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      inline_keyboard:
      - Климат дома:/climate, Кто дома:/whoishome
      - Состояние сервера:/server, Выход:/exit
      message_tag: telegtam_state
      message: '🏠 Получить дополнительную информацию о состоянии дома:'
      title: Сервер работает уже {{states('sensor.ha_motocounter_hour')}} часов.
  mode: single
- id: '1619868597401'
  alias: 'telegram: состояние сервера'
  description: отправляет данные сервера по команде /server
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /server
  condition: []
  action:
  - service: telegram_bot.delete_message
    data:
      message_id: last
      chat_id: '171773021'
  - service: notify.telegram
    data:
      title: Сервер работает (chat_id:{{ trigger.event.data.chat_id }})
      message: Температура процессора {{states('sensor.processor_temperature')}}°C,
        загрузка {{states('sensor.processor_use_percent')}}%, свободно памяти {{states('sensor.memory_free')}}
        MB, использовано диска {{states('sensor.disk_use_percent_home')}}%, Wi-fi
        RSSI {{states('sensor.host_wifi_rssi')}} dBm.
      data:
        message_tag: keyboard_temp
        inline_keyboard: Перезагрузить:/reboot,  Отмена:/exit
  mode: single
- id: '1619875044294'
  alias: 'telegram: Перезагрузка сервера'
  description: отправляет данные сервера по команде /reboot
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /reboot_yes
  condition: []
  action:
  - service: telegram_bot.delete_message
    data:
      message_id: last
      chat_id: '171773021'
  - service: telegram_bot.answer_callback_query
    data:
      callback_query_id: '171773021'
      message: Home assistant перезапускается.
      show_alert: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: homeassistant.restart
  mode: single
- id: reboot_no
  alias: 'telegram: Отмена последнего действия '
  description: отправляет данные сервера по команде /exit
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /exit
  condition: []
  action:
  - service: telegram_bot.delete_message
    data:
      message_id: last
      chat_id: '171773021'
- id: '1621189209028'
  alias: 'telegram: климат'
  description: отправляет данные датчиков температуры по команде /climate
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /climate
  condition: []
  action:
  - service: telegram_bot.edit_message
    data:
      message_id: last
      chat_id: '171773021'
      title: Климат дома
      message: Улица T0={{states('sensor.realmeteo_temperature')}}°C, H={{states('sensor.realmeteo_humidity')}}%   Ветер
        {{states('sensor.realmeteo_wind_dir')}} {{states('sensor.realmeteo_wind_speed')}}м/с,  Климат
        дома>Дашина комната T0={{states('sensor.a4c1385807ca_temperature')}}°C, H={{states('sensor.a4c1385807ca_humidity')}}%,   Сашина
        комната T0={{states('sensor.a4c13872bfd0_temperature')}}°C, H={{states('sensor.a4c13872bfd0_humidity')}}%,   Кухня
        T0={{states('sensor.a4c138ef74be_temperature')}}°C, H={{states('sensor.a4c138ef74be_humidity')}}%,   Гостиная
        T0={{states('sensor.a4c138a22b37_temperature')}}°C, H={{states('sensor.a4c138a22b37_humidity')}}%
      inline_keyboard: Очистить:/exit
  - service: telegram_bot.send_message
  mode: single
- id: '1621590499408'
  alias: 'telegram: Кто дома'
  description: отправляет кто дома по команде /whoishome
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /whoishome
  condition: []
  action:
  - service: telegram_bot.edit_message
    data:
      message_id: last
      chat_id: '171773021'
      title: Сейчас дома
      message: '{%- set entites = expand(''group.family'') %}{% for prs in entites
        %}{% if     prs.state == "home" %} {{ prs.attributes.friendly_name }}{% endif
        %}{%     endfor %} {% if is_state("group.family", "not_home") %}Никого нет{%
        endif %}'
  mode: single
- id: '1621951369846'
  alias: 'telegram: подтверждение перезагрузки сервера'
  description: управляет перезагрузкой сервера по команде /reboot
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: /reboot
  condition: []
  action:
  - service: telegram_bot.edit_message
    data:
      inline_keyboard: Да:/reboot_yes, Нет:/exit
      message: Для перезагрузки нажми ДА, или НЕТ для выхода.
      title: Подтверди  перезагрузку!
      message_id: last
      chat_id: '171773021'
  mode: single
- id: '1616789482858'
  alias: 'telegram: Сообщение о запуске HA'
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: notify.telegram
    data:
      message: Время запуска {{ states('sensor.start_time') }} сек., Температура процессора
        {{states('sensor.processor_temperature')}}°C, загрузка {{states('sensor.processor_use_percent')}}%
      title: HA запущен в {{ states('sensor.time') }}
  mode: single
- id: '1616790891781'
  alias: 'telegram: сообщение об открытии двери'
  description: ''
  trigger:
  - platform: state
    entity_id: input_datetime.last_opendoor_time
    id: last_opendoor_time_change
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: person.sergei_khorovets
      state: home
  action:
  - service: notify.telegram
    data:
      message: Дверь открывалась в {{ as_timestamp(states('input_datetime.last_opendoor_time'))
        | timestamp_custom('%H:%M:%S %d.%m.%y')}}.
  mode: single
- id: '1617016309278'
  alias: 'telegram: Сообщение о выходе из дома Даши'
  description: ''
  trigger:
  - platform: state
    entity_id: input_datetime.last_opendoor_time
  condition:
  - condition: state
    entity_id: person.dasha
    state: home
  action:
  - wait_for_trigger:
    - platform: state
      entity_id: person.dasha
      to: not_home
    timeout: 00:10:00
    continue_on_timeout: false
  - service: notify.telegram
    data:
      message: Даша вышла из дома в {{ states ('input_datetime.last_opendoor_time')
        }}
  mode: single
- id: turn_on_auto_light
  alias: 'autolight: Включение автосвета на кухне'
  description: Включение автосвета на кухне
  trigger:
  - platform: state
    entity_id: input_boolean.auto_light_on_off
    to: 'on'
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.0x158d0003cf7b9a_motion
      state: 'off'
    - condition: device
      type: is_off
      device_id: cb0de61ccfccc8fbf89ee88725c933a1
      entity_id: light.wled
      domain: light
  action:
  - service: timer.cancel
    entity_id: timer.light_turn_off
    data: {}
  - service: timer.start
    data:
      duration: '0'
    target:
      entity_id: timer.light_turn_off
- id: turn_off_auto_light
  alias: 'autolight: Выключение автосвета на кухне'
  trigger:
  - platform: state
    entity_id: input_boolean.auto_light_on_off
    to: 'off'
  condition:
  - condition: state
    entity_id: timer.light_turn_off
    state: active
  action:
  - service: timer.cancel
    entity_id: timer.light_turn_off
    data: {}
- id: turn_on_light
  alias: 'autolight: Включение света вручную'
  trigger:
  - platform: state
    entity_id: light.wled
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.auto_light_on_off
    state: 'on'
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.0x158d0003cf7b9a_motion
      state: 'off'
  action:
  - service: timer.cancel
    entity_id: timer.light_turn_off
    data: {}
  - service: timer.start
    data:
      duration: '0'
    target:
      entity_id: timer.light_turn_off
- id: turn_off_light
  alias: 'autolight:  Выключение света вручную'
  description: При принудительном выключении света останавливает таймер, если он был
    запущен.
  trigger:
  - platform: state
    entity_id: light.wled
    to: 'off'
  condition:
  - condition: state
    entity_id: timer.light_turn_off
    state: active
  action:
  - service: timer.cancel
    entity_id: timer.light_turn_off
    data: {}
- id: turn_on_light_by_motion
  alias: 'autolight: Включение подсветки на кухне по движению'
  description: Первая часть автоматизации
  trigger:
  - platform: state
    entity_id: binary_sensor.0x158d0003cf7b9a_motion
    to: 'on'
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.auto_light_on_off
      state: 'on'
    - condition: device
      type: is_off
      device_id: cb0de61ccfccc8fbf89ee88725c933a1
      entity_id: light.wled
      domain: light
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.auto_light_time
        state: 'on'
      sequence:
        service: script.wled_nightmode
    - conditions:
      - condition: time
        after: '20:00:00'
        before: '22:59'
      sequence:
        service: script.wled_warm_light
    default: []
  mode: single
- id: cancel_timer_by_motion
  alias: 'autolight: Сброс таймера датчиком движения'
  trigger:
  - platform: state
    entity_id: binary_sensor.0x158d0003cf7b9a_motion
    to: 'on'
  condition:
  - condition: state
    entity_id: timer.light_turn_off
    state: active
  action:
  - service: timer.cancel
    entity_id: timer.light_turn_off
    data: {}
- id: start_timer_by_motion
  alias: autolight:Запуск таймера по датчику движения
  description: Запускает таймер после прекращения поступления сообщений о движении
  trigger:
  - platform: state
    entity_id: binary_sensor.0x158d0003cf7b9a_motion
    to: 'off'
  condition:
  - condition: state
    entity_id: input_boolean.auto_light_on_off
    state: 'on'
  - condition: and
    conditions:
    - condition: state
      entity_id: light.wled
      state: 'on'
  action:
  - service: timer.start
    data:
      duration: '0'
    target:
      entity_id: timer.light_turn_off
- id: turn_off_light_by_timer
  alias: 'autolight: Таймер остановился'
  description: После остановки таймера, проверяет состояние wled, если включен - то
    выключаем.
  trigger:
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.light_turn_off
  condition:
  - condition: and
    conditions:
    - condition: state
      entity_id: input_boolean.auto_light_on_off
      state: 'on'
    - condition: state
      entity_id: binary_sensor.0x158d0003cf7b9a_motion
      state: 'off'
    - condition: state
      entity_id: light.wled
      state: 'on'
  action:
  - type: turn_off
    device_id: cb0de61ccfccc8fbf89ee88725c933a1
    entity_id: light.wled
    domain: light
  mode: single
- id: '1629642084073'
  alias: 'autolight: Автосвет по времени'
  description: 'Включает автоматическое управление светом по времени датчика '
  trigger:
  - platform: state
    entity_id: binary_sensor.auto_light_time
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.auto_light_time
        state: 'on'
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.auto_light_on_off
    - conditions:
      - condition: state
        entity_id: binary_sensor.auto_light_time
        state: 'off'
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.auto_light_on_off
    default: []
  mode: single
- id: wled_mi_button_control
  alias: 'WLED: Управление wled при помощи mi_button'
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.mi_button_action
  action:
  - choose:
    - conditions: '{{ trigger.to_state.state == ''single'' }}'
      sequence:
      - type: toggle
        device_id: cb0de61ccfccc8fbf89ee88725c933a1
        entity_id: light.wled
        domain: light
    - conditions: '{{ trigger.to_state.state == ''double'' }}'
      sequence:
      - service: light.turn_on
        data_template:
          entity_id: light.wled
          transition: '0.5'
          brightness: "{%- if (state_attr('light.wled', 'brightness') | int) <= 3\
            \ %}\n  51\n{% elif (state_attr('light.wled', 'brightness') | int) <=\
            \ 51 %}\n  102\n{% elif (state_attr('light.wled', 'brightness') | int)\
            \ <= 102 %}\n  153\n{% elif (state_attr('light.wled', 'brightness') |\
            \ int) <= 153 %}\n  204\n{% elif (state_attr('light.wled', 'brightness')\
            \ | int) <= 204 %}\n  255\n{% elif (state_attr('light.wled', 'brightness')\
            \ | int) <= 255 %}\n  3\n{% endif %}\n"
    - conditions:
      - condition: state
        entity_id: light.wled
        state: 'on'
      - condition: template
        value_template: '{{ trigger.to_state.state == ''triple'' }}'
      sequence:
      - service: wled.effect
        data:
          effect: '{{ state_attr(''light.wled'', ''effect_list'') | random }}'
          intensity: 146
          palette: Default
          speed: 148
        target:
          entity_id: light.wled
      - service: automation.turn_on
        target:
          entity_id: automation.sluchainye_effekty_wled
    - conditions:
      - condition: state
        entity_id: light.wled
        state: 'on'
      - condition: template
        value_template: '{{ trigger.to_state.state == ''many'' }}'
      sequence:
      - service: script.wled_warm_light
  mode: single
- id: Set Effect
  alias: 'WLED: Set Effect'
  trigger:
  - platform: state
    entity_id: input_select.wled_effect_list
  condition: []
  action:
  - service: wled.effect
    data:
      effect: '{{ states("input_select.wled_effect_list") }}'
    entity_id: light.wled
  mode: single
- id: initial Set Effect to dropdown
  alias: 'WLED: init Set effect list to dropdown'
  description: Начальная загрузка эффектов в список
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: input_select.set_options
    data:
      options: '{{ state_attr("light.wled", "effect_list") }}'
    target:
      entity_id: input_select.wled_effect_list
  mode: single
- id: Set Effect to dropdown
  alias: 'WLED: Set effect to dropdown'
  description: Установка текущего эффекта в листбокс
  trigger:
  - platform: state
    entity_id: light.wled
    attribute: effect_list
  condition: []
  action:
  - service: input_select.select_option
    data:
      option: '{{ state_attr( "light.wled", "effect" ) }}'
    target:
      entity_id: input_select.wled_effect_list
  mode: single
- id: Set Reverce
  alias: 'WLED: Set Reverse'
  description: ''
  trigger:
  - platform: state
    entity_id: input_boolean.reverse
    for: 00:00:00
  condition: []
  action:
  - service: wled.effect
    data:
      reverse: '{{ states("input_boolean.reverse") }}'
    entity_id: light.wled
  mode: single
- id: Set Intensity
  alias: 'WLED: Set Intensity'
  description: ''
  trigger:
  - platform: state
    entity_id: input_number.intensity
    for: 00:00:00
  condition: []
  action:
  - service: wled.effect
    data:
      intensity: '{{ states("input_number.intensity") | int }}'
    entity_id: light.wled
  mode: single
  max: 10
- id: Set intensity to slider
  alias: 'WLED: Set intensity to slider'
  description: ''
  trigger:
  - platform: state
    entity_id: light.wled
    attribute: intensity
  condition: []
  action:
  - service: input_number.set_value
    entity_id: input_number.intensity
    data:
      value: '{{ state_attr("light.wled", "intensity") | int }}'
  mode: single
- id: Set Speed
  alias: 'WLED: Set Speed'
  description: ''
  trigger:
  - platform: state
    entity_id: input_number.speed
    for: 00:00:00
  condition: []
  action:
  - service: wled.effect
    data:
      speed: '{{ states("input_number.speed")  | int }}'
    entity_id: light.wled
  mode: single
- id: Set Speed to slider
  alias: 'WLED: Set speed to slider'
  description: ''
  trigger:
  - platform: state
    entity_id: light.wled
    attribute: speed
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: '{{ state_attr("light.wled", "speed") | int }}'
    entity_id: input_number.speed
  mode: single
- id: Set Brightness
  alias: 'WLED: Set Brightness'
  description: установка яркости wled
  trigger:
  - platform: state
    entity_id: input_number.brightness
  condition: []
  action:
  - service: light.turn_on
    data:
      brightness: '{{ states("input_number.brightness") | int }}'
    entity_id: light.wled
  mode: single
- id: Set Reverce to slider
  alias: 'WLED: Set brightness to slider'
  description: ''
  trigger:
  - platform: state
    entity_id: light.wled
  condition: []
  action:
  - service: input_number.set_value
    data:
      value: '{{ state_attr("light.wled", "brightness") | int }}'
    entity_id: input_number.brightness
  mode: single
- id: '1639231342976'
  alias: 'telegram: Сообщение в Телеграм о новой версии HA'
  description: Сообщение в Телеграм о новой версии HA
  trigger:
  - platform: state
    entity_id: binary_sensor.updater
    id: new_version_ha
    to: 'on'
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      title: Доступна новая версия!
      message: Доступно обновление home assistant!
      message_tag: new_version_ha
  mode: single
- id: '1640501465586'
  alias: 'Яндекс: приветствие при приходе домой папы'
  description: ''
  trigger:
  - platform: state
    entity_id: input_datetime.last_opendoor_time
  condition: []
  action:
  - wait_for_trigger:
    - platform: state
      entity_id: person.sergei_khorovets
      to: home
    continue_on_timeout: false
  - service: tts.yandex_station_say
    data:
      message: Здравствуй, Сергей. Дома всё спокойно.
  mode: single
- id: '1641116796749'
  alias: 'Telegram: Сообщение о полной зарядке телефона'
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.mi_9t_uroven_zariada_akkumuliatora
    above: '85'
  condition:
  - condition: state
    entity_id: binary_sensor.mi_9t_zariadka_ustroistva
    state: 'on'
  action:
  - service: telegram_bot.send_message
    data:
      message: Телефон заряжен на 85%
  mode: single
- id: '1641236433476'
  alias: 'security: время последнего открытия двери'
  description: ''
  trigger:
  - platform: state
    entity_id: binary_sensor.0x158d000452a120_contact
    to: 'on'
  condition: []
  action:
  - wait_for_trigger:
    - platform: state
      entity_id: binary_sensor.0x158d000452a120_contact
      to: 'off'
    continue_on_timeout: false
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.last_opendoor_time
    data:
      datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
  mode: single
- id: '1641237050453'
  alias: 'security: время последнего движения кухня'
  description: ''
  trigger:
  - platform: state
    to: 'on'
    entity_id: binary_sensor.0x158d0003cf7a75_motion
  condition: []
  action:
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.last_motion_time_kitchen
    data:
      datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
  mode: single
- id: '1641237161832'
  alias: 'security: время последнего движения комната 1'
  description: ''
  trigger:
  - platform: state
    to: 'on'
    entity_id: binary_sensor.0x158d0003cf7a75_motion
  condition: []
  action:
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.last_motion_time_room1
    data:
      datetime: '{{ now().strftime(''%Y-%m-%d %H:%M:%S'') }}'
  mode: single
- id: '1641237439780'
  alias: 'telegram: сообщение о сработке датчика движения комната 1'
  description: сработка датчика движения на кухне, если дома никого нет
  trigger:
  - platform: state
    entity_id: input_datetime.last_motion_time_room1
    attribute: timestamp
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: group.family
      state: home
  action:
  - service: notify.telegram
    data:
      message: Обнаружено движение в комнате Даши!
      title: Внимание!
  mode: restart
- id: system_new_device_found
  alias: 'telegram: Новое устройство подключено к сети'
  description: Новое устройство подключено к сети
  trigger:
  - platform: event
    event_type: device_tracker_new_device
  action:
  - service: notify.telegram
    data:
      message: '✴ Новое устройство: {{ trigger.event.data.host_name if trigger.event.data.host_name
        is defined else ''NA'' }} - ({{ trigger.event.data.entity_id if trigger.event.data.entity_id
        is defined else ''NA'' }})'
  initial_state: true
  mode: queued
  max: 10
- id: system_entity_change
  alias: 'telegram: system_entity_change'
  trigger:
  - platform: event
    event_type: entity_registry_updated
  action:
  - service: notify.telegram
    data:
      message: '❇ {{ trigger.event.data.action | capitalize }}: {{ trigger.event.data.old_entity_id+''->''
        if trigger.event.data.old_entity_id is defined }}{{ trigger.event.data.entity_id
        if trigger.event.data.entity_id is defined else ''NA'' }}'
  initial_state: true
  mode: queued
  max: 20
  max_exceeded: silent
- id: system_low_battery
  alias: 'telegram: system_low_battery'
  trigger:
  - platform: time
    at: '20:30'
  action:
  - service: group.set
    data:
      object_id: batteries
      entities: '{%-for state in states.sensor if state.entity_id.endswith("_battery")%}
        {{ state.entity_id}}{%- if not loop.last -%}, {%- endif -%} {%-endfor%}'
  - service: script.turn_on
    entity_id: script.battery_level_check
  initial_state: true
- id: system_supervisor_update_available
  alias: 'telegram: system_supervisor_update_available'
  trigger:
  - platform: state
    entity_id: binary_sensor.updater_supervisor
    from: 'off'
    to: 'on'
  action:
  - service: notify.telegram
    data:
      message: 🛠 Supervisor - доступна новая версия {{ state_attr('sensor.supervisor_updates',
        'newest_version') }}!
  initial_state: true
- id: system_supervisor_updated
  alias: 'telegram: system_supervisor_updated'
  trigger:
  - platform: state
    entity_id: sensor.ha_supervisor_current_version
  condition:
  - condition: template
    value_template: "{% set ignore = ['unknown', 'unavailable', 'none'] %} {{ trigger.from_state.state\
      \ not in ignore and\n  trigger.to_state.state not in ignore and\n  trigger.to_state.state\
      \ != trigger.from_state.state\n}}\n"
  action:
  - service: notify.telegram
    data:
      message: 🛠 Supervisor обновлен с {{ trigger.from_state.state }} на {{ trigger.to_state.state
        }}
  initial_state: true
- id: '1641407563779'
  alias: 'telegram: Удалить кнопки через 10 мин'
  description: ''
  trigger:
  - platform: event
    event_type: telegram_sent
  condition:
  - condition: template
    value_template: '''{{ (trigger.event.data.message_tag) == "keyboard_temp" }}'''
  action:
  - delay:
      minutes: 10
  - service: telegram_bot.edit_replymarkup
    data:
      message_id: '{{ trigger.event.data.message_id }}'
      chat_id: '{{ trigger.event.data.chat_id }}'
      inline_keyboard: []
  mode: queued
  max: 30
- id: '1643136310116'
  alias: 'telegram: Сообщение утром'
  description: ''
  trigger:
  - platform: time
    at: 06:05
  - platform: state
    entity_id: binary_sensor.phone_alarm
    to: 'on'
  condition: []
  action:
  - service: notify.telegram
    data:
      message: Дома всё спокойно. Температура на улице. {{states('sensor.realmeteo_temperature')}}°C,  влажность
        {{states('sensor.realmeteo_humidity')}}%,  ветер {{states('sensor.realmeteo_wind_dir_full')}}  {{states('sensor.realmeteo_wind_speed')}}
        м/с,  {{state_attr('weather.yandex_weather', 'weather_condition')}}  Дома>Дашина
        комната T0={{states('sensor.a4c1385807ca_temperature')}}°C, H={{states('sensor.a4c1385807ca_humidity')}}%,   Сашина
        комната T0={{states('sensor.a4c13872bfd0_temperature')}}°C, H={{states('sensor.a4c13872bfd0_humidity')}}%,   Кухня
        T0={{states('sensor.a4c138ef74be_temperature')}}°C, H={{states('sensor.a4c138ef74be_humidity')}}%,   Гостиная
        T0={{states('sensor.a4c138a22b37_temperature')}}°C, H={{states('sensor.a4c138a22b37_humidity')}}%
        бакс {{states('sensor.usd_rur')}} руб.,  евро {{states ('sensor.eur_rur')}}
        руб.
      title: Доброе утро. Сейчас {{ states('sensor.time') }}
  mode: single
- id: '1643550757170'
  alias: 'Telegram: Даша приехала в'
  description: ''
  trigger:
  - platform: zone
    entity_id: person.dasha
    zone: zone.shkola_tel
    event: enter
  condition: []
  action:
  - service: telegram_bot.send_message
    data:
      message: Даша прибыла в школу.
  mode: single
- id: '1643564917861'
  alias: 'system: Low battery level detection & notification for all battery sensors'
  description: ''
  use_blueprint:
    path: sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      actions:
      - service: telegram_bot.send_message
        data:
          message: 'Сели Батареи!!! {{sensors}} '
